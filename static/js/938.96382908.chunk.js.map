{"version":3,"file":"static/js/938.96382908.chunk.js","mappings":"oRAEaA,EAAeC,EAAAA,GAAAA,GAAH,mJASZC,EAAWD,EAAAA,GAAAA,GAAH,8Q,SCqDrB,EAxDiB,WACf,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAGA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,MAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuCR,OArCAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAGKC,EAAAA,EAAAA,IAAQJ,GAHb,UAGRK,EAHQ,QAKNX,EAASW,EAATX,MACEY,OANI,uBAOZP,GAAW,GAPC,0BAUdJ,GAAQ,kBACND,EAAKa,KAAI,SAAAC,GACP,OACE,UAAChB,EAAD,YACE,gBACEiB,IACED,EAAKE,cACDC,EAAAA,EAAAA,IAAYH,EAAKE,aAAc,YAC/B,8EAENE,IAAI,GACJC,MAAM,SAEPL,EAAKM,KAVR,cAUyBN,EAAKO,YAVfP,EAAKQ,GAavB,GAhBK,IAVM,kDA6BdnB,EAAS,KAAMC,SA7BD,sGAAH,qDAkCfK,GACD,GAAE,CAACH,KAEF,gCACGJ,IAAS,uBAAIA,IAEbE,IAAW,yEACZ,SAACR,EAAD,UAAeI,MAGpB,C,iNC5DKuB,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAgB,mCAAG,sGACPL,EAASM,IAAI,qBADN,uBACtBlB,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,qDAKhBmB,EAAe,mCAAG,WAAMC,GAAN,yFACNR,EAASM,IAAT,iBAAuBE,IADjB,uBACrBpB,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfM,EAAc,SAACe,EAASC,GACnC,MAAM,+BAAN,OAAsCA,EAAtC,YAAiDD,EAClD,EAEYtB,EAAO,mCAAG,WAAMqB,GAAN,yFACER,EAASM,IAAT,iBAAuBE,EAAvB,aADF,uBACbpB,EADa,EACbA,KADa,kBAEdA,GAFc,2CAAH,sDAKPuB,EAAe,mCAAG,WAAMH,GAAN,yFACNR,EAASM,IAAT,iBAAuBE,EAAvB,aADM,uBACrBpB,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfwB,EAAe,mCAAG,WAAOC,EAAOC,GAAd,yFACNd,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CAAEU,MAAAA,EAAOC,KAAAA,KAFU,uBACrB1B,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,uD","sources":["pages/CastPage/CastPage.style.jsx","pages/CastPage/CastPage.jsx","shared/Api/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastCardList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const CastCard = styled.li`\n  width: calc(16.666% - 10px);\n  margin-bottom: 20px;\n\n  &:hover {\n    transform: translateY(-5px);\n  }\n\n  img {\n    display: block;\n    margin-bottom: 10px;\n    width: 100%;\n  }\n\n  p {\n    margin: 0;\n    text-align: center;\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { getCast, getImageUrl } from '../../shared/Api/Api';\n// import Loader from 'modules/Loader/Loader';\n\nimport { CastCard, CastCardList } from './CastPage.style';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n\n  // const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [message, setMessage] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        // setLoading(true);\n        const data = await getCast(movieId);\n\n        const { cast } = data;\n        if (!cast.length) {\n          setMessage(true);\n          return;\n        }\n        setCast(() =>\n          cast.map(item => {\n            return (\n              <CastCard key={item.id}>\n                <img\n                  src={\n                    item.profile_path\n                      ? getImageUrl(item.profile_path, 'original')\n                      : 'https://dummyimage.com/640x480/2a2a2a/ffffff&text=Product+image+placeholder'\n                  }\n                  alt=\"\"\n                  width=\"50px\"\n                />\n                {item.name} chracter: {item.character}\n              </CastCard>\n            );\n          })\n        );\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        // setLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n  return (\n    <>\n      {error && <p>{error}</p>}\n      {/* {loading && <Loader />} */}\n      {message && <p>No cast information available for this movie</p>}\n      <CastCardList>{cast}</CastCardList>\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '65bf756d8028470116d86303f5d05e74',\n  },\n});\n\nexport const getTrendingFilms = async () => {\n  const { data } = await instance.get('/trending/all/day');\n  return data;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}`);\n  return data;\n};\n\nexport const getImageUrl = (imgName, imgSize) => {\n  return ` https://image.tmdb.org/t/p/${imgSize}/${imgName}`;\n};\n\nexport const getCast = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/reviews`);\n  return data;\n};\n\nexport const getSearchMovies = async (query, page) => {\n  const { data } = await instance.get('/search/movie', {\n    params: { query, page },\n  });\n  return data;\n};\n"],"names":["CastCardList","styled","CastCard","useState","cast","setCast","error","setError","message","setMessage","movieId","useParams","useEffect","fetchCast","getCast","data","length","map","item","src","profile_path","getImageUrl","alt","width","name","character","id","instance","axios","baseURL","params","api_key","getTrendingFilms","get","getMovieDetails","movie_id","imgName","imgSize","getMovieReviews","getSearchMovies","query","page"],"sourceRoot":""}